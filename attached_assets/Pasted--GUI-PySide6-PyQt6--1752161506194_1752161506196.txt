Вот чёткий план офлайн-десктопного приложения:

GUI-слой

Фреймворк: PySide6 (или PyQt6)

Задача: окно с видеоплеером, кнопки “Загрузить видео”, “Транскрибировать”, “Поиск” и поле результата поиска

Модуль извлечения аудио

Инструмент: FFmpeg через обёртку ffmpeg-python

Задача: из любого видео (MP4, MKV и т. п.) получить WAV с единственным каналом и частотой 16 кГц

Модуль распознавания речи (ASR)

Основная библиотека: локальная модель OpenAI Whisper через whisper-cpp-обёртку

Альтернатива: Vosk, Coqui STT

Задача: расшифровать WAV в текст, получив список сегментов с временными метками

Модуль генерации субтитров

Библиотека: pysubs2

Задача: на основе списка сегментов создать файл .srt или .vtt для отображения в плеере

Модуль поиска по транскрипту

СУБД: SQLite с полнотекстовым движком FTS5

Задача: сохранить каждый текстовый сегмент вместе с его start/end, отвечать быстрым запросом “MATCH” на ключевую фразу

Связующий слой (Controller)

Задача:

При нажатии “Загрузить видео” — запустить модуль извлечения аудио

При “Транскрибировать” — передать аудио в ASR, отдать результат в генератор субтитров и в индекс

При вводе поискового запроса — сделать SQL-MATCH и отправить результат GUI, чтобы плеер прыгнул на нужную метку

Упаковка и дистрибуция

Инструмент: PyInstaller (или cx_Freeze)

Задача: собрать всё в единый исполняемый файл для Windows/Mac/Linux

Итого:

PySide6 для интерфейса

ffmpeg-python для аудио

whisper-cpp (или Vosk/Coqui) для ASR

pysubs2 для субтитров

SQLite+FTS5 для поиска

PyInstaller для сборки

Организуйте код по модулям (GUI, extractor, transcriber, subtitler, indexer, controller) и свяжите их через простые вызовы в ответ на действия пользователя.

Ви сказали: добавь еще описание программы что бы я скинул ИИ агенту и он смог начать создавать программу

Програма ChatGPT сказала: Описание проекта: «Offline Video Transcriber & Searcher»

Назначение программы Приложение позволяет пользователю загружать очень длинные видеофайлы, автоматически генерировать субтитры с точными таймкодами и затем мгновенно находить и воспроизводить нужный фрагмент по ключевой фразе — всё полностью офлайн, без внешних API.

Основные функции

Загрузка видео

Поддержка популярных форматов (MP4, MKV, AVI и др.).

Извлечение аудио

Конвертация видеопотока в моно WAV 16 кГц для дальнейшего распознавания.

Распознавание речи (ASR)

Локальная модель Whisper (whisper-cpp) или альтернативы (Vosk, Coqui STT).

Получение текста и таймкодов для каждого сегмента.

Генерация субтитров

Форматы SRT и WebVTT для последующего отображения в плеере.

Индексирование и поиск

Сохранение каждого сегмента в SQLite с FTS5.

Моментальный полнотекстовый поиск по фразам.

Воспроизведение и навигация

Встроенный видеоплеер с возможностью прыжка на найденный таймкод.

Экспорт и дистрибуция

Сборка одним исполняемым файлом (Windows/Mac/Linux) через PyInstaller.

Нефункциональные требования
Полностью офлайн: нет сетевых вызовов и API.

Кроссплатформенность: Windows, macOS, Linux.

Удобство интерфейса: минималистичный GUI с понятными кнопками и полем поиска.

Производительность: возможность обрабатывать часы видео на современных CPU, поддержка GPU-ускорения для ASR при наличии.

Масштабируемость кода: чёткое разделение модулей, возможность замены ASR-движка без правки GUI.

Архитектура и модули
GUI (PySide6/QT)

Главное окно с видеоплеером, кнопками действий и строкой поиска.

Виджет прогресса для отображения этапов обработки.

Extractor

Модуль на базе ffmpeg-python для конвертации видео → WAV.

Transcriber

Обёртка над whisper-cpp (или Vosk/Coqui) для распознавания речи.

Возвращает список сегментов: { start: float, end: float, text: str }.

Subtitler

Использует pysubs2 для генерации .srt/.vtt на основе сегментов.

Indexer

Инициализирует SQLite с FTS5, добавляет записи сегментов.

Обеспечивает функцию поиска по ключевой фразе.

Controller

Координирует последовательность действий:

Загрузка видео → Extractor

Конвертация и транскрипция → Transcriber

Запись субтитров → Subtitler

Индексация → Indexer

Обрабатывает запросы поиска и командует плеером прыгать на нужное время.

Packager

PyInstaller для сборки в автономные исполняемые файлы на целевых платформах.

Пользовательский сценарий
Открыть приложение

Нажать «Загрузить видео» и выбрать файл.

Запустить транскрипцию кнопкой «Транскрибировать» (отображается прогресс).

По завершении автоматически создаются файлы субтитров и индексируются данные.

Ввести ключевую фразу в строку поиска и нажать Enter.

Плеер мгновенно перемещается к первому совпадению.

При необходимости — экспорт субтитров или закрытие приложения.

Окружение и зависимости
Язык: Python 3.10+

Основные библиотеки:

PySide6 (или PyQt6)

ffmpeg-python

whisper-cpp (или Vosk/Coqui)

pysubs2

sqlite3 (FTS5)

Инструменты сборки: PyInstaller